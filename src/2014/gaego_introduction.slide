GAE/Go機能紹介
Google App Engint/Go Introduction
15:00 20 Dec 2014
Tags: Go, GAE

Daigo Ikeda
Knightso, LLC
@hogedigo

* GAEとは

.image ./gaego_handson/images/gae.png 155 200

- Googleのインフラ上でアプリを作る仕組み(PAAS)
- 負荷に応じて自動スケール
- 従量課金。無料枠あり。
- 機能に制約がある（ファイル操作、通信、システムコール等）
- Python、Java、PHP、 *Go* をサポート

* GAE/Goの特徴

.image ./gaego_handson/images/gae_gopher.jpg

* 速い！
特にspin-upが。

.image ./gaego_handson/images/gae_spinups.png 270 450

もちろん実行速度も。

* Built-in Concurrency！

.image ./gaego_handson/images/concurrent_gophers.jpg 194 400
.image ./gaego_handson/images/concurrent_gophers.jpg 194 400

平行処理をシンプルに書ける→パフォーマンスチューニングが容易
つまり課金が抑えられる！！

* 現状（2014/12現在）

- ずっとbeta(´・ω・`) 
- でもproduction readyだよ、って誰かが言ってた
- go runtimeは1.2。1.4betaも使える

* 各機能紹介

- Datastore（KVS)
- Memcache（分散メモリキャッシュ）
- Task Queue（非同期メッセージング）
- Search（全文検索）
- URL Fetch
- Mail
- Cron（スケジュール実行）
- その他

* Datastore

* Datastoreとは

- GAEの核となる機能
- Key Value Store。keyでGet、Putする
- データは各地データセンターに自動でレプリケートされる
- 大規模データでもGet,Putのパフォーマンスは低下しない！
- 検索も出来る。でもちょっと苦手
- トランザクション更新も出来る。でも制限キツメ

* Datastore - KeyでのPut

.code ./gaego_introduction/src/sample/ds/ds.go / start put1 OMIT/,/ end put1 OMIT/
.code ./gaego_introduction/src/sample/ds/ds.go / start put2 OMIT/,/ end put2 OMIT/
.code ./gaego_introduction/src/sample/ds/ds.go / start put3 OMIT/,/ end put3 OMIT/

* Datastore - KeyでのPut（複数）

.code ./gaego_introduction/src/sample/ds/ds.go / start putMulti1 OMIT/,/ end putMulti1 OMIT/
- PutのRPCが並列になる為高速に処理できる

* Datastore - KeyでのGet

.code ./gaego_introduction/src/sample/ds/ds.go / start get1 OMIT/,/ end get1 OMIT/

* Datastore - KeyでのGet（複数）

.code ./gaego_introduction/src/sample/ds/ds.go / start getMulti1 OMIT/,/ end getMulti1 OMIT/
- GetのRPCが並列になる為高速に処理できる

* Datastore - Query（検索）

.code ./gaego_introduction/src/sample/ds/ds.go / start query1 OMIT/,/ end query1 OMIT/
- 条件検索にはインデックスが必要
- 単一プロパティのインデックスは自動で作成される（課金対象なので注意！）
- 複数プロパティに対する検索には複合インデックスを明示的に作成する必要あり（次ページ）
- インデックスの更新には遅延がある為条件と結果が一致しないことがある（Ancestorクエリは保証される）

* Datastore - 複合インデックス設定

.code ./gaego_introduction/src/sample/index.yaml
- # AUTOGENERATEDコメントがあると、ローカルサーバーでクエリ実行した際に自動でインデックス設定が追加される
- インデックス設定を追加しても既存エンティティに対するインデックスは作成されない。全てputし直す必要あり

* Datastore - Query（カーソル）

.code ./gaego_introduction/src/sample/ds/ds.go / start cursor1 OMIT/,/ end cursor1 OMIT/
- カーソルを使用して、「次のページ」検索ができる
- Offsetは高コストなので出来るだけカーソルを

* 

.code ./gaego_introduction/src/sample/ds/ds.go / start cursor2 OMIT/,/ end cursor2 OMIT/
.code ./gaego_introduction/src/sample/ds/ds.go / start cursor3 OMIT/,/ end cursor3 OMIT/

* Datastore - トランザクション

.code ./gaego_introduction/src/sample/ds/ds.go / start tx OMIT/,/ end tx OMIT/
- トランザクションを使用して強い一貫性を保証
- クエリにはトランザクション効かない（Ancestorクエリは例外）

* 

- 同じEntity Groupのエンティティのみトランザクションに含められる
- XG（クロスグループ）トランザクションを使えばEntity Group５個まで含められる
- Task Queue（後述） Addを5個迄トランザクションに含む事ができる。結果整合性が得られる

* Memcache

* Memcacheとは

- 分散メモリキャッシュサービス
- 高速
- いくら使っても無料
- 勝手にデータ消える。dedicated（有料）にすれば消えない

* Memcache - Set

.code ./gaego_introduction/src/sample/memcache/memcache.go / start memset OMIT/,/ end memset OMIT/
- Key(string)を指定してValue([]byte)を保存

* Memcache - Get

.code ./gaego_introduction/src/sample/memcache/memcache.go / start memget OMIT/,/ end memget OMIT/
- Key(string)を指定してValue([]byte)を取得

* Memcache - Set Gob

.code ./gaego_introduction/src/sample/memcache/memcache.go / start memgobset OMIT/,/ end memgobset OMIT/
- Codec(memcache.Gob)を指定してstructを保存
- GobはGoのデータ構造をバイナリ変換する為の仕組み。
.link http://golang.org/pkg/encoding/gob/

* Memcache - Get Gob

.code ./gaego_introduction/src/sample/memcache/memcache.go / start memgobget OMIT/,/ end memgobget OMIT/
- Codec(memcache.Gob)を指定してstructを取得
- Codec(memcache.JSON)も

* Memcache - その他

- DatastoreのGetやクエリの結果をキャッシュするのが定石
- 自動でやってくれる3rd partyライブラリも

goon

.link https://github.com/mjibson/goon

nds

.link https://github.com/qedus/nds


* Search

* Searchとは

- 全文検索サービス
- 形態素解析、インデックス作成も自動でやってくれる
- Google検索と同じ様なクエリ文字列による検索が可能

* Search - 保存

.code ./gaego_introduction/src/sample/search/search.go / start searchput OMIT/,/ end searchput OMIT/
- IDを付与して構造体をPutする
- 各フィールドに対してインデックスが作成される

* Search - 検索

.code ./gaego_introduction/src/sample/search/search.go / start search OMIT/,/ end search OMIT/
- クエリ文字列で検索

.link https://cloud.google.com/appengine/docs/go/search/query_strings

* URL Fetch

* URL Fetch

- GAEの外に対してhttp通信を行う
- 外部サービスAPIとの連携にも使用

* URL Fetch - fetch

.code ./gaego_introduction/src/sample/urlfetch/urlfetch.go / start urlfetch OMIT/,/ end urlfetch OMIT/

* Mail

* Mail

- GAEからメール送信
- GAEでメール受信

* Mail - 送信

.code ./gaego_introduction/src/sample/mail/mail.go / start mailsend OMIT/,/ end mailsend OMIT/
- Senderは管理者またはログイン中ユーザーのgoogleアカウントアドレス、もしくはxxxx@appid.appspotmail.com（xxxxは任意）である必要がある

* Mail - 受信

app.yaml

 - url: /_ah/mail/.*
   script: _go_app
   login: admin
 
 inbound_services:
 - mail

.code ./gaego_introduction/src/sample/mail/mail.go / start mailreceive1 OMIT/,/ end mailreceive1 OMIT/
.code ./gaego_introduction/src/sample/mail/mail.go / start mailreceive2 OMIT/,/ end mailreceive2 OMIT/
- xxxx@appid.appspotmail.com（xxxxは任意）宛にメールが届くとHTTP（POST）で/_ah/mail/addressが呼び出される

* 

- Request.BodyにMIMEデータが格納されているので自分でパースする
- パースにはnet/mailパッケージを利用できる
.link http://golang.org/pkg/net/mail/

* Cron

* Cron - スケジュールタスク実行

cron.yaml

 cron:
 - description: daily summary job
   url: /tasks/summary
   schedule: every 24 hours
 - description: monday morning mailout
   url: /mail/weekly
   schedule: every monday 09:00
   timezone: Australia/NSW
 - description: new daily summary job
   url: /tasks/summary
   schedule: every 24 hours
   target: beta

- 決められたタイミングでリクエストハンドラを実行

* その他の機能

* その他の機能

- User
- Channel
- XMPP
- Modules
- Managed VMs
- Google Cloud Storage連携

* 最後に

FYI:

.link http://knightso.hateblo.jp/archive/category/golang

.image ./gaego_handson/images/letitgo.png 310 440

