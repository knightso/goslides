Datastoreで検索エンジンを作る

08 Jun 2016
Tags: GAE, Go

Daigo Ikeda
Knightso, LLC
@hogedigo

* Profile

Daigo Ikeda
@hogedigo

Knightso, LLC
http://www.knightso.co.jp/
Shizuoka, JAPAN

.image ./dssearch/images/hogecat.jpg 

* Datastoreだけで検索エンジン作りたい!

* How

- 全文照合 or 索引 → 索引!
- インデックス作成方法

N-gram(Bigram)
 
 AppEngine → ap, pp, pe, en, ng, gi, in, ne

Prefix

 AppEngine → a, ap, app, appe, appen, appeng, appengi, appengin, appengine

形態素解析
 
 貴社の記者が汽車で帰社した → 貴社, の, 記者, が, 汽車, で, 帰社, した

併用

* Why not Search API?

.link https://cloud.google.com/appengine/docs/go/search/

 // search for documents with pianos that cost less than $5000
 index.Search(ctx, "Product = piano AND Price < 5000", nil)

- たしかに便利
- インデックスサイズに制限(10GB) → スケールしない(´･ω･`)

* 実装

* Entity Model

 type Book struct {
 	ID          string `datastore:",noindex"`
 	Title       string `datastore:",noindex"`
 	Category    string `datastore:",noindex"`
 	Price       int    `datastore:",noindex"`
 	PublishDate string `datastore:",noindex"`
 }

* Index Model

インデックス保存用のエンティティを用意する

 type BookIndex struct {
 	Indexes     []string
 	Title       string
 	Category    string
 	Price       int
 	PublishDate string
 }

Bookと同じKey名で保存する(Kindが異なる)

Indexesプロパティに解析したインデックスを保存
ソートに必要なプロパティも保存

* Custom Index

eg) ORDER BY PublishDate DESC, Price, Category

index.yaml

 - kind: BookIndex
   properties:
   - name: Indexes
   - name: PublishDate
     direction: desc
   - name: Price
   - name: Category

- ソートの組み合わせの数だけ定義が必要
- ソート必要なければカスタムインデックス不要

* Save Indexes

.image ./dssearch/images/makeindex.png 420 _

- 可能な限りEquality Filterが使える様にインデックスを作る
- ALLインデックス(カスタムインデックス節約)

* Search!

 q := datastore.NewQuery(KindBookIndex).Limit(QUERY_LIMIT + 1).KeysOnly()
 
 if req.Title != "" {
 	for _, w := range bigram(req.Title) {
 		q = q.Filter("Indexes =", "t " + w)
 	}
 }
 
 if req.Category != "" {
 	q = q.Filter("Indexes =", "c " + req.Category)
 }
 
 if req.Price != "" {
 	q = q.Filter("Indexes =", "p " + req.Price)
 }

 // 最初のソートに指定したプロパティにはInequality Filterを使える! 
 if req.PublishDateFrom != "" {
 	q = q.Filter("PublishDate >=", req.PublishDateFrom)
 }
 
* 

 if noParams {
 	q = q.Filter("Indexes =", createIndex("", "ALL"))
 }
 
 q = q.Order("-PublishDate").Order("Price").Order("Category")
 
 keys := make([]*datastore.Key, 0, QUERY_LIMIT)
 
 ite := q.Run(ctx)
 
 for len(keys) < QUERY_LIMIT {
 	idxKey, err := ite.Next(nil)
 	if err == datastore.Done {
 		break
 	}

 	...snip...
 
 	key := datastore.NewKey(ctx, KindBook, idxKey.StringID(), 0, nil)
 	keys = append(keys, key)
 }

* 

 books := make([]*Book, len(keys))
 if len(books) > 0 {
 	if err := datastore.GetMulti(ctx, keys, books); err != nil {
 		return nil, fmt.Errorf("GetMulti failed: %s", err)
 	}
 }

* On-Memory Filter

Inequality Filterは最初のソート対象プロパティに対してしか適用できない
他プロパティに対してフィルターかけたい場合はプログラムでやるしかない


 //KeysOnly外す
 for len(keys) < QUERY_LIMIT {
 	var book Book
 	idxKey, err := ite.Next(&book)
 
 	...snip...
 
 	if book.Price < priceFrom || book.Price >= priceTo {
 		continue
 	}
 
 	books = append(books, book)
 }

- 最後の手段
- オンメモリでやる場合も可能な限りEquality Filterで絞りこんでおくとよい


* Projection Query

.link https://cloud.google.com/appengine/docs/go/datastore/projectionqueries

 SELECT PublishDate, Price, Category FROM Book

必要なプロパティのみ取得

 q := datastore.NewQuery(KindBookIndex).
 	Project("PublishDate", "Price", "Category").
 	Limit(QUERY_LIMIT + 1)

- 安い!＼(^o^)／

* まとめ

* Pros

- 速い!
- Scalable
- Full Managed

* Cons

- Entityのサイズ上限(1M)
- LIKE検索できない→N-gram
- OR(IN)検索できない
- Inequality Filterは最初のソートプロパティにしか適用できない
- インデックス作成コスト

* Single Propety Indexだけで実装したい！

* Index Model

 type BookIndex struct {
 	Indexes []string
 }

- Indexesのみ保存

* Index Key

eg) ORDER BY Price, PublishDate DESC, Category

 <Price>:<PublishDate>:<Category>:<ID>

- Priceは0埋め
- Categoryは空白埋め
- 降順ソート項目は反転させる必要あり

* 

.image ./dssearch/images/single-props.png 300 _ 

- KeysOnly
- ソートは勝手にかかる
- Keyから値が取れる(like Projection Query)

- ソートパターン毎にIndex Entityを保存する必要あり
